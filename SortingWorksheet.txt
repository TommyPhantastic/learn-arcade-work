Create a new file ending in `.txt` in PyCharm. Copy/paste this worksheet across and complete.

1. Write code to swap the values 25 and 40.

my_list = [55, 41, 52, 68, 45, 27, 40, 25, 37, 26]

temp = my_list[6]
my_list[6] = my_list[7]
my_list[7] = temp

2. Write code to swap the values 2 and 27.

my_list = [27, 32, 18,  2, 11, 57, 14, 38, 19, 91]

temp = my_list[0]
my_list[0] = my_list[3]
my_list[3] = temp

3. Why does the following code not work? Explain it, don't just list working code.

my_list = [70, 32, 98, 88, 92, 36, 81, 83, 87, 66]
temp = my_list[0]
my_list[1] = my_list[0]
my_list[0] = temp

"temp" stores the value of my_list[0] but my_list[1] also is set to the value of my_list[0]; the value of my_list[1] is overwritten. Additionally, the last line of the code effectively does nothing since temp is already set to my_list[0], so the last line of code is setting my_list[0] to equal my_list[0].

4. Show how the following numbers can be sorted using the selection sort. Show the numbers after each iteration of the outer loop, similar to what is shown in the book. I am NOT looking for a copy of the code to do the sort. If you include any code for problems 4-7 you are doing it wrong.

97   74    8   98   47   62   12   11    0   60
0   74    8   98   47   62   12   11    97   60
0   8    74   98   47   62   12   11    97   60
0   8    11   98   47   62   12   74    97   60
0   8    11   12   47   62   98   74    97   60
0   8    11   12   47   62   98   74    97   60
0   8    11   12   47   60   98   74    97   62
0   8    11   12   47   60   62   74    97   98
0   8    11   12   47   60   62   74    97   98
0   8    11   12   47   60   62   74    97   98

5. Show how the following numbers can be sorted using the selection sort:

74   92   18   47   40   58    0   36   29   25
0   92   18   47   40   58    74   36   29   25
0   18   92   47   40   58    74   36   29   25
0   18   25   47   40   58    74   36   29   92
0   18   25   29   40   58    74   36   47   92
0   18   25   29   36   58    74   40   47   92
0   18   25   29   36   40    74   58   47   92
0   18   25   29   36   40    47   58   74   92
0   18   25   29   36   40    47   58   74   92
0   18   25   29   36   40    47   58   74   92

6. Show how the following numbers can be sorted using the INSERTION sort. (Note: If you think the 0 gets immediately sorted into position, you are doing it wrong. Go back and re-read how this sort works.)

74   92   18   47   40   58    0   36   29   25
74   92   18   47   40   58    0   36   29   25
18   74   92   47   40   58    0   36   29   25
18   47   74   92   40   58    0   36   29   25
18   40   47   74   92   58    0   36   29   25
18   40   47   58   74   92    0   36   29   25
0    18   40   47   58   74   92   36   29   25
0    18   36   40   47   58   74   92   29   25
0    18   29   36   40   47   58   74   92   25
0    18   25   29   36   40   47   58   74   92

7. Show how the following numbers can be sorted using the insertion sort:

37   11   14   50   24    7   17   88   99    9
11   37   14   50   24    7   17   88   99    9
11   14   37   50   24    7   17   88   99    9
11   14   37   50   24    7   17   88   99    9
11   14   24   37   50    7   17   88   99    9
7    11   14   24   37   50   17   88   99    9
7    11   14   17   24   37   50   88   99    9
7    11   14   17   24   37   50   88   99    9
7    11   14   17   24   37   50   88   99    9
7    9    11   14   17   24   37   50   88   99

8. Explain what `min_pos` does in the selection sort.
min_pos finds the position with the smallest number.

9. Explain what `cur_pos` does in the selection sort.
cur_pos loops through the entire array.

10. Explain what `scan_pos` does in the selection sort.
scan_pos scans the list from left to right.

11. Explain what `key_pos` and `key_value` are in the insertion sort.
key_pos marks the boundary between the sorted and unsorted portions of the list. key_value is the comparison value, and compares if a number is larger or smaller than it.

12. Explain `scan_pos` in the insertion sort.
scan_pos scans to the left of the key_pos.

13. Look at the example sort program here:

https://learn.arcade.academy/chapters/27_sorting/sorting.html#full-sorting-example


Modify the sorts to print the number of times the inside loop is run, and the number of times the outside loop is run. Modify the program to work with a list of 100. Paste the code you used here. Run the program and list the numbers you got here. (DON'T FORGET TO INCLUDE THE RESULTS!) Inside loop for selection sort should be about 5,000, and insertion sort 2,500. Double-check if you don't get numbers close to these.

import random


def selection_sort(my_list):
    """ Sort a list using the selection sort """

    # Loop through the entire array
    outtercount = 0
    innercount = 0
    for cur_pos in range(len(my_list)):
        # Find the position that has the smallest number
        # Start with the current position
        min_pos = cur_pos
        outtercount += 1

        # Scan left to right (end of the list)
        for scan_pos in range(cur_pos + 1, len(my_list)):
            innercount += 1

            # Is this position smallest?
            if my_list[scan_pos] < my_list[min_pos]:
                # It is, mark this position as the smallest
                min_pos = scan_pos


        # Swap the two values
        temp = my_list[min_pos]
        my_list[min_pos] = my_list[cur_pos]
        my_list[cur_pos] = temp
    print("The outter loop ran",outtercount, "times.")
    print("The inner loop ran",innercount, "times.")

def insertion_sort(my_list):
    """ Sort a list using the insertion sort """

    # Start at the second element (pos 1).
    # Use this element to insert into the
    # list.
    outtercount = 0
    innercount = 0
    for key_pos in range(1, len(my_list)):

        # Get the value of the element to insert
        key_value = my_list[key_pos]

        # Scan from right to the left (start of list)
        scan_pos = key_pos - 1
        outtercount += 1

        # Loop each element, moving them up until
        # we reach the position the
        while (scan_pos >= 0) and (my_list[scan_pos] > key_value):
            my_list[scan_pos + 1] = my_list[scan_pos]
            scan_pos = scan_pos - 1
            innercount += 1

        # Everything's been moved out of the way, insert
        # the key into the correct location
        my_list[scan_pos + 1] = key_value

    print("The outter loop ran", outtercount, "times.")
    print("The inner loop ran", innercount, "times.")
# This will point out a list
# For more information on the print formatting {:3}
# see the chapter on print formatting.
def print_list(my_list):
    for item in my_list:
        print(f"{item:3}", end="")
    print()


def main():
    # Create two lists of the same random numbers
    list_for_selection_sort = []
    list_for_insertion_sort = []
    list_size = 100
    for i in range(list_size):
        new_number = random.randrange(100)
        list_for_selection_sort.append(new_number)
        list_for_insertion_sort.append(new_number)

    # Print the original list
    print("Original List")
    print_list(list_for_selection_sort)

    # Use the selection sort and print the result
    print("Selection Sort")
    selection_sort(list_for_selection_sort)
    print_list(list_for_selection_sort)

    # Use the insertion sort and print the result
    print("Insertion Sort")
    insertion_sort(list_for_insertion_sort)
    print_list(list_for_insertion_sort)


main()

Original List
  0 23 11 39 37 95 80 82 79 33 49 22 26 46 50 36 40 26  0 16 37 48 31 54 76 41 85 61 86 85 20 22 10 77 95 96  3 22 50 94 41 12 22 94 16 85 77 16 88 69 50  2 12 32 70 22 21 66 53 43 38 26  1  1 27 39 82 65 22 51 44 42  6 33 49 50 96 25 84 86 91  5 58 30 67 78 46 54 44 92 83 13 94 54 19 94 15 42 17 91
Selection Sort
The outter loop ran 100 times.
The inner loop ran 4950 times.
  0  0  1  1  2  3  5  6 10 11 12 12 13 15 16 16 16 17 19 20 21 22 22 22 22 22 22 23 25 26 26 26 27 30 31 32 33 33 36 37 37 38 39 39 40 41 41 42 42 43 44 44 46 46 48 49 49 50 50 50 50 51 53 54 54 54 58 61 65 66 67 69 70 76 77 77 78 79 80 82 82 83 84 85 85 85 86 86 88 91 91 92 94 94 94 94 95 95 96 96
Insertion Sort
The outter loop ran 99 times.
The inner loop ran 2261 times.
  0  0  1  1  2  3  5  6 10 11 12 12 13 15 16 16 16 17 19 20 21 22 22 22 22 22 22 23 25 26 26 26 27 30 31 32 33 33 36 37 37 38 39 39 40 41 41 42 42 43 44 44 46 46 48 49 49 50 50 50 50 51 53 54 54 54 58 61 65 66 67 69 70 76 77 77

To turn in: Upload your .py file. Just drag it from PyCharm to the upload for the assignment. (BUT WAIT! Make sure you include the results from #13, and not just the program.)